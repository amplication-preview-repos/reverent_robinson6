/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EnterpriseBundle } from "./EnterpriseBundle";
import { EnterpriseBundleCountArgs } from "./EnterpriseBundleCountArgs";
import { EnterpriseBundleFindManyArgs } from "./EnterpriseBundleFindManyArgs";
import { EnterpriseBundleFindUniqueArgs } from "./EnterpriseBundleFindUniqueArgs";
import { CreateEnterpriseBundleArgs } from "./CreateEnterpriseBundleArgs";
import { UpdateEnterpriseBundleArgs } from "./UpdateEnterpriseBundleArgs";
import { DeleteEnterpriseBundleArgs } from "./DeleteEnterpriseBundleArgs";
import { EnterpriseBundleService } from "../enterpriseBundle.service";
@graphql.Resolver(() => EnterpriseBundle)
export class EnterpriseBundleResolverBase {
  constructor(protected readonly service: EnterpriseBundleService) {}

  async _enterpriseBundlesMeta(
    @graphql.Args() args: EnterpriseBundleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EnterpriseBundle])
  async enterpriseBundles(
    @graphql.Args() args: EnterpriseBundleFindManyArgs
  ): Promise<EnterpriseBundle[]> {
    return this.service.enterpriseBundles(args);
  }

  @graphql.Query(() => EnterpriseBundle, { nullable: true })
  async enterpriseBundle(
    @graphql.Args() args: EnterpriseBundleFindUniqueArgs
  ): Promise<EnterpriseBundle | null> {
    const result = await this.service.enterpriseBundle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EnterpriseBundle)
  async createEnterpriseBundle(
    @graphql.Args() args: CreateEnterpriseBundleArgs
  ): Promise<EnterpriseBundle> {
    return await this.service.createEnterpriseBundle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EnterpriseBundle)
  async updateEnterpriseBundle(
    @graphql.Args() args: UpdateEnterpriseBundleArgs
  ): Promise<EnterpriseBundle | null> {
    try {
      return await this.service.updateEnterpriseBundle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EnterpriseBundle)
  async deleteEnterpriseBundle(
    @graphql.Args() args: DeleteEnterpriseBundleArgs
  ): Promise<EnterpriseBundle | null> {
    try {
      return await this.service.deleteEnterpriseBundle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
