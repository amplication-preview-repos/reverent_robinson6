/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LandmarkService } from "../landmark.service";
import { LandmarkCreateInput } from "./LandmarkCreateInput";
import { Landmark } from "./Landmark";
import { LandmarkFindManyArgs } from "./LandmarkFindManyArgs";
import { LandmarkWhereUniqueInput } from "./LandmarkWhereUniqueInput";
import { LandmarkUpdateInput } from "./LandmarkUpdateInput";

export class LandmarkControllerBase {
  constructor(protected readonly service: LandmarkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Landmark })
  async createLandmark(
    @common.Body() data: LandmarkCreateInput
  ): Promise<Landmark> {
    return await this.service.createLandmark({
      data: {
        ...data,

        player: data.player
          ? {
              connect: data.player,
            }
          : undefined,
      },
      select: {
        bonus: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,

        player: {
          select: {
            id: true,
          },
        },

        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Landmark] })
  @ApiNestedQuery(LandmarkFindManyArgs)
  async landmarks(@common.Req() request: Request): Promise<Landmark[]> {
    const args = plainToClass(LandmarkFindManyArgs, request.query);
    return this.service.landmarks({
      ...args,
      select: {
        bonus: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,

        player: {
          select: {
            id: true,
          },
        },

        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Landmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async landmark(
    @common.Param() params: LandmarkWhereUniqueInput
  ): Promise<Landmark | null> {
    const result = await this.service.landmark({
      where: params,
      select: {
        bonus: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,

        player: {
          select: {
            id: true,
          },
        },

        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Landmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLandmark(
    @common.Param() params: LandmarkWhereUniqueInput,
    @common.Body() data: LandmarkUpdateInput
  ): Promise<Landmark | null> {
    try {
      return await this.service.updateLandmark({
        where: params,
        data: {
          ...data,

          player: data.player
            ? {
                connect: data.player,
              }
            : undefined,
        },
        select: {
          bonus: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,

          player: {
            select: {
              id: true,
            },
          },

          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Landmark })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLandmark(
    @common.Param() params: LandmarkWhereUniqueInput
  ): Promise<Landmark | null> {
    try {
      return await this.service.deleteLandmark({
        where: params,
        select: {
          bonus: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,

          player: {
            select: {
              id: true,
            },
          },

          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
