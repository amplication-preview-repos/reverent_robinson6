/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Landmark as PrismaLandmark,
  Player as PrismaPlayer,
} from "@prisma/client";

export class LandmarkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LandmarkCountArgs, "select">): Promise<number> {
    return this.prisma.landmark.count(args);
  }

  async landmarks(
    args: Prisma.LandmarkFindManyArgs
  ): Promise<PrismaLandmark[]> {
    return this.prisma.landmark.findMany(args);
  }
  async landmark(
    args: Prisma.LandmarkFindUniqueArgs
  ): Promise<PrismaLandmark | null> {
    return this.prisma.landmark.findUnique(args);
  }
  async createLandmark(
    args: Prisma.LandmarkCreateArgs
  ): Promise<PrismaLandmark> {
    return this.prisma.landmark.create(args);
  }
  async updateLandmark(
    args: Prisma.LandmarkUpdateArgs
  ): Promise<PrismaLandmark> {
    return this.prisma.landmark.update(args);
  }
  async deleteLandmark(
    args: Prisma.LandmarkDeleteArgs
  ): Promise<PrismaLandmark> {
    return this.prisma.landmark.delete(args);
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.landmark
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
