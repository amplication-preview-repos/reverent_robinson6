/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Landmark } from "./Landmark";
import { LandmarkCountArgs } from "./LandmarkCountArgs";
import { LandmarkFindManyArgs } from "./LandmarkFindManyArgs";
import { LandmarkFindUniqueArgs } from "./LandmarkFindUniqueArgs";
import { CreateLandmarkArgs } from "./CreateLandmarkArgs";
import { UpdateLandmarkArgs } from "./UpdateLandmarkArgs";
import { DeleteLandmarkArgs } from "./DeleteLandmarkArgs";
import { Player } from "../../player/base/Player";
import { LandmarkService } from "../landmark.service";
@graphql.Resolver(() => Landmark)
export class LandmarkResolverBase {
  constructor(protected readonly service: LandmarkService) {}

  async _landmarksMeta(
    @graphql.Args() args: LandmarkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Landmark])
  async landmarks(
    @graphql.Args() args: LandmarkFindManyArgs
  ): Promise<Landmark[]> {
    return this.service.landmarks(args);
  }

  @graphql.Query(() => Landmark, { nullable: true })
  async landmark(
    @graphql.Args() args: LandmarkFindUniqueArgs
  ): Promise<Landmark | null> {
    const result = await this.service.landmark(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Landmark)
  async createLandmark(
    @graphql.Args() args: CreateLandmarkArgs
  ): Promise<Landmark> {
    return await this.service.createLandmark({
      ...args,
      data: {
        ...args.data,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Landmark)
  async updateLandmark(
    @graphql.Args() args: UpdateLandmarkArgs
  ): Promise<Landmark | null> {
    try {
      return await this.service.updateLandmark({
        ...args,
        data: {
          ...args.data,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Landmark)
  async deleteLandmark(
    @graphql.Args() args: DeleteLandmarkArgs
  ): Promise<Landmark | null> {
    try {
      return await this.service.deleteLandmark(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  async getPlayer(@graphql.Parent() parent: Landmark): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
